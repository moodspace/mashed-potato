//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyBucks.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("35, 35, 38")]
        public global::System.Drawing.Color listViewBackColor_dark {
            get {
                return ((global::System.Drawing.Color)(this["listViewBackColor_dark"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("250, 251, 253")]
        public global::System.Drawing.Color listViewBackColor_light {
            get {
                return ((global::System.Drawing.Color)(this["listViewBackColor_light"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("242, 243, 245")]
        public global::System.Drawing.Color sidebarBackColor_light {
            get {
                return ((global::System.Drawing.Color)(this["sidebarBackColor_light"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("64, 64, 64")]
        public global::System.Drawing.Color sidebarBackColor_dark {
            get {
                return ((global::System.Drawing.Color)(this["sidebarBackColor_dark"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool useLightTheme {
            get {
                return ((bool)(this["useLightTheme"]));
            }
            set {
                this["useLightTheme"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("WhiteSmoke")]
        public global::System.Drawing.Color foreColor_dark {
            get {
                return ((global::System.Drawing.Color)(this["foreColor_dark"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Black")]
        public global::System.Drawing.Color foreColor_light {
            get {
                return ((global::System.Drawing.Color)(this["foreColor_light"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DimGray")]
        public global::System.Drawing.Color statusBackColor_dark {
            get {
                return ((global::System.Drawing.Color)(this["statusBackColor_dark"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("LightCyan")]
        public global::System.Drawing.Color statusBackColor_light {
            get {
                return ((global::System.Drawing.Color)(this["statusBackColor_light"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int languageIndexSettings {
            get {
                return ((int)(this["languageIndexSettings"]));
            }
            set {
                this["languageIndexSettings"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[default]")]
        public string customFontFamily {
            get {
                return ((string)(this["customFontFamily"]));
            }
            set {
                this["customFontFamily"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool useLongPathInTitlebar {
            get {
                return ((bool)(this["useLongPathInTitlebar"]));
            }
            set {
                this["useLongPathInTitlebar"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool useFileExtInExp {
            get {
                return ((bool)(this["useFileExtInExp"]));
            }
            set {
                this["useFileExtInExp"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>jpg</string>
  <string>jpeg</string>
  <string>bmp</string>
  <string>png</string>
  <string>gif</string>
  <string>tiff</string>
  <string>ico</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection previewPicFormats {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["previewPicFormats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>3gp</string>
  <string>wmv</string>
  <string>wm</string>
  <string>avi</string>
  <string>flv</string>
  <string>mp4</string>
  <string>mpeg</string>
  <string>mpg</string>
  <string>rm</string>
  <string>rmvb</string>
  <string>mkv</string>
  <string>ts</string>
  <string>mov</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection predefinedVideoFormats {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["predefinedVideoFormats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>htm</string>
  <string>html</string>
  <string>xml</string>
  <string>xhtml</string>
  <string>shtml</string>
  <string>mht</string>
  <string>asp</string>
  <string>php</string>
  <string>swf</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection previewWebFormats {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["previewWebFormats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>jpg</string>
  <string>jpeg</string>
  <string>bmp</string>
  <string>png</string>
  <string>gif</string>
  <string>tiff</string>
  <string>ico</string>
  <string>pcx</string>
  <string>tif</string>
  <string>cur</string>
  <string>tga</string>
  <string>ai</string>
  <string>dxf</string>
  <string>wmf</string>
  <string>svg</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection predefinedImageFormats {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["predefinedImageFormats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>mp3</string>
  <string>wma</string>
  <string>wav</string>
  <string>ape</string>
  <string>flac</string>
  <string>ogg</string>
  <string>aac</string>
  <string>mid</string>
  <string>midi</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection predefinedAudioFormats {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["predefinedAudioFormats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>txt</string>
  <string>html</string>
  <string>htm</string>
  <string>shtml</string>
  <string>xhtml</string>
  <string>chm</string>
  <string>hlp</string>
  <string>rtf</string>
  <string>tex</string>
  <string>ltx</string>
  <string>doc</string>
  <string>docx</string>
  <string>ppt</string>
  <string>pptx</string>
  <string>odf</string>
  <string>pdf</string>
  <string>xls</string>
  <string>xlsx</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection predefinedDocumentFormats {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["predefinedDocumentFormats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>mba</string>
  <string>gz</string>
  <string>tar</string>
  <string>bz2</string>
  <string>bz</string>
  <string>zip</string>
  <string>rar</string>
  <string>7z</string>
  <string>cab</string>
  <string>ace</string>
  <string>iso</string>
  <string>img</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection predefinedArchiveFormats {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["predefinedArchiveFormats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("9")]
        public float customFontSize {
            get {
                return ((float)(this["customFontSize"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Drawing.Font customFont {
            get {
                return ((global::System.Drawing.Font)(this["customFont"]));
            }
            set {
                this["customFont"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring />\r\n</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection recentArchiveList {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["recentArchiveList"]));
            }
            set {
                this["recentArchiveList"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int iconIndexSettings {
            get {
                return ((int)(this["iconIndexSettings"]));
            }
            set {
                this["iconIndexSettings"] = value;
            }
        }
    }
}
